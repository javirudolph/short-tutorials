---
title: "Git and Github for Remote Collaboration"
author: "@javirudolph"
format:
  revealjs: 
    incremental: true
self-contained: true
---


# Objective

- Maintaining code for scientific collaboration as a main objective.
- Effective ways to *store*, track changes, and enable collaboration on code. 

## Why Github? 
  - it is the most used for version control and collaboration.
	- integrates communication features
	  - issues
	  - discussions
	  - pages
	- engage and collaborate on code, but also publish info to a webpage. 


# The difference between Git and Github
- Git is the **version control system** that enables all the collaborative tools available on Github.
- Git launched in 2005. 
  - Basic concepts of git: commit, push, pull, checkout.
- Git operations through the terminal.
- Github is web-based: functionality available to users less familiar with software development
  

# Github, GitLab, and BitBucket 

They are all similar and they provide **hosting services**, which is basically a home for your project on the internet.

It's like having a DropBox or GoogleDrive but for git-based projects.

This allows other people to see your stuff, synchronize it, and contribute.

# Some Github features 
- Well-designed user interface
- **Issues** originally a bug tracker but highly underutilized in our fields
- R and Github integration is nicer due to the active R package development community.

- An intro on this can be found [here](https://peerj.com/preprints/3159v2/) and [here](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004668)

# Step-by-step process:
:::: {.columns}

::: {.column width="50%"}
![Artwork by @allison_horst](ahorst_git_workflow.png)
:::

::: {.column width="50%"}
1. Create remote repo and sync with files and directory locally.
2. Modify files locally or remotely
3. Frequently ‘commit’ the changes with a description of the changes
4. Synchronize commits with Github (push and pull)

:::

::::

---

### The repository contains: the files, the modifications and the description of these changes. Others can download and synchronize these files with their changes (‘clone’)

## Practical ways to use: 

1. Storage: just because you *can* version control something, doesn’t mean that you *should*. 
  - plain text-based documents. Git stores the original file first, and then takes up very little space by only tracking the differences between versions. 
  - Things **not** to version control are [large data files](https://docs.github.com/en/repositories/working-with-files/managing-large-files) that never change.
    - If code is fully reproducible, you shouldn’t need to store the output. 
  - Better ‘storage’ for long term - zenodo

## Practical ways to use: (cont.) 

2. Project continuity
  - So many researchers hold limited-term appointments
    - Keeping docs on personal computers only does’t work for file transfer when people move on. 
    - Easier code and data handover - **stop it with the emails**
    - Assigning tasks

## Practical ways to use: (cont.)  

3. Project management: useful for highly collaborative research. 
  - [Github Issues](https://docs.github.com/en/issues/tracking-your-work-with-issues/quickstart) for discrete tasks and sub-tasks: identify, assign, categorize, keep track/history.
  - [Github Discussions](https://docs.github.com/en/discussions/collaborating-with-your-community-using-discussions/about-discussions) message board for conversation
  - [Github Projects:](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects) real-time tracking of project priorities and status
- Examples: [Paper](https://github.com/fmsabatini/sPlotOpen_Manuscript) with good tracking of issues and discussion and a [Reproducible article](https://github.com/cboettig/noise-phenomena)


# Intro Resources

For the R user, best simple straightforward resource out there is [Happy git with R](https://happygitwithr.com/index.html)

Github itself has a dedicated section for learning in the [docs](https://docs.github.com/en/get-started) and in particular, the [Hello World tutorial](https://docs.github.com/en/get-started/quickstart/hello-world) will get you creating a repo, managing a branch and merging a pull request.

## Branches and pull requests

1.  Create **Branch** to make a change.
2.  Commit changes to the new branch.
3.  Open **Pull request** to merge the changes to main branch.
4.  Optional and recommended: delete branch
- Also known as a [feature branch workflow](https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow)

# 

![source https://www.nobledesktop.com/learn/git/git-branches](git-branches-merge.png)

# Demo 

